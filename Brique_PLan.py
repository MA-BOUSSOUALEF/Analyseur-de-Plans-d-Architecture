import google.generativeai as genai
import PIL.Image
import cv2
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
import io
import os
from dotenv import load_dotenv

load_dotenv()


def check_api_configuration():
    """
    V√©rifier que la cl√© API Gemini est correctement configur√©e
    """
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå Cl√© API Gemini non trouv√©e dans le fichier .env")
        print("üìù Veuillez ajouter GEMINI_API_KEY=votre_cle dans le fichier .env")
        return False
    else:
        print("‚úÖ Cl√© API Gemini charg√©e depuis .env")
        return True


def preprocess_architectural_plan(pil_image):
    """
    Pr√©traitement sp√©cialis√© pour les plans d'architecture techniques
    """
   
    cv_image = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)

    if len(cv_image.shape) == 3:
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
    else:
        gray = cv_image

    # 2. Am√©lioration du contraste adaptatif (CLAHE)
    # Sp√©cialement efficace pour les plans avec du texte et des lignes fines
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    contrast_enhanced = clahe.apply(gray)

    # 3. R√©duction du bruit tout en pr√©servant les d√©tails fins
    # Utilisation d'un filtre bilat√©ral qui pr√©serve les contours
    denoised = cv2.bilateralFilter(contrast_enhanced, 9, 75, 75)

    # 4. Am√©lioration de la nettet√© pour les lignes et le texte
    # Kernel sp√©cialement con√ßu pour renforcer les lignes fines
    sharpen_kernel = np.array([[-1,-1,-1,-1,-1],
                              [-1, 2, 2, 2,-1],
                              [-1, 2, 8, 2,-1],
                              [-1, 2, 2, 2,-1],
                              [-1,-1,-1,-1,-1]]) / 8.0

    sharpened = cv2.filter2D(denoised, -1, sharpen_kernel)

    # 5. Am√©lioration sp√©cifique pour les cotes et annotations
    # Cr√©ation d'un masque pour renforcer le texte
    text_enhanced = enhance_text_and_dimensions(sharpened)

    # 6. Optimisation de la taille (important pour Gemini)
    optimized = optimize_image_size(text_enhanced, max_size=1536)

    # 7. Conversion finale vers PIL
    processed_pil = Image.fromarray(optimized)

    # 8. Ajustement final de luminosit√© et contraste
    enhancer = ImageEnhance.Contrast(processed_pil)
    final_image = enhancer.enhance(1.2)

    enhancer = ImageEnhance.Brightness(final_image)
    final_image = enhancer.enhance(1.1)

    return final_image

def enhance_text_and_dimensions(image):
    """
    Am√©lioration sp√©cifique pour les cotes et le texte des plans
    """
    # D√©tection des contours pour identifier les lignes et le texte
    edges = cv2.Canny(image, 30, 100, apertureSize=3)

    # Dilatation l√©g√®re pour connecter les caract√®res fragment√©s
    kernel_text = np.ones((2,2), np.uint8)
    dilated = cv2.dilate(edges, kernel_text, iterations=1)

    # Fermeture pour remplir les trous dans le texte
    kernel_close = np.ones((3,3), np.uint8)
    closed = cv2.morphologyEx(dilated, cv2.MORPH_CLOSE, kernel_close)

    # Combiner avec l'image originale pour renforcer le texte
    enhanced = cv2.addWeighted(image, 0.85, closed, 0.15, 0)

    return enhanced

def optimize_image_size(image, max_size=1536):
    """
    Redimensionner l'image en gardant les proportions
    Optimis√© pour Gemini (recommand√©: 1024-2048px)
    """
    height, width = image.shape[:2]

    if max(height, width) > max_size:
        if height > width:
            new_height = max_size
            new_width = int(width * (max_size / height))
        else:
            new_width = max_size
            new_height = int(height * (max_size / width))

        # Utilisation d'interpolation INTER_AREA pour la r√©duction (meilleure qualit√©)
        resized = cv2.resize(image, (new_width, new_height),
                           interpolation=cv2.INTER_AREA)
        return resized

    return image

def analyze_architectural_plan_with_preprocessing(image_path, api_key=None):
    """
    Analyse compl√®te d'un plan d'architecture avec pr√©traitement optimis√©
    Si api_key n'est pas fournie, elle sera charg√©e depuis le fichier .env
    """

    if api_key is None:
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("Cl√© API non trouv√©e. Veuillez la d√©finir dans le fichier .env ou la passer en param√®tre.")
    
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.5-flash')

    try:
        print("üîÑ Chargement de l'image...")
        original_image = PIL.Image.open(image_path)
        print(f"‚úÖ Image charg√©e: {original_image.size}")

        print("üîÑ Pr√©traitement de l'image...")
        processed_image = preprocess_architectural_plan(original_image)
        print(f"‚úÖ Image pr√©trait√©e: {processed_image.size}")

        # processed_image.save("plan_pretraite.jpg", quality=95)

        # Prompt optimis√© pour l'analyse
        prompt = """
        Analysez ce plan d'architecture pr√©trait√© et fournissez les informations suivantes :

        Listez toutes les pi√®ces avec :
        - leur nom
        - localisation
        - surface (en m¬≤)
        - dimensions approximatives (longueur, largeur, hauteur si disponible)
        - portes avec leurs dimensions
        - fen√™tres avec leurs dimensions
        - √©quipements √©lectriques avec dimensions si visibles (prises, VRE, etc.)
        - autres √©quipements avec leurs dimensions (mobilier, √©lectrom√©nager, sanitaires‚Ä¶)

        D√©crivez les murs :
        - localisation
        - largeur
        - longueur
        - hauteur
        - description (type int√©rieur/ext√©rieur, porteur ou cloison, etc.)

        D√©crivez l'escalier :
        - type
        - localisation
        - dimensions approximatives
        - direction

        Comptez le nombre de portes et fen√™tres total

        R√©pondez au format JSON suivant :
        {
          "pieces": [
            {
              "nom": "",
              "localisation": "",
              "surface_m2": "",
              "dimensions_m": {
                "longueur": "",
                "largeur": "",
                "hauteur": ""
              },
              "portes": [
                { "dimension_m": "" }
              ],
              "fenetres": [
                { "dimension_m": "" }
              ],
              "tous_les_equipements": [
                { "nom": "", "dimension_m": "" }
              ]
            }
          ],
          "murs": {
            "localisation": "",
            "largeur": "",
            "longueur": "",
            "hauteur": "",
            "description": ""
          },
          "escalier": {
            "type": "",
            "localisation": "",
            "dimensions_m": "",
            "direction": ""
          }
        }
        """

        # Analyse avec Gemini
        print("üîÑ Analyse en cours avec Gemini...")
        processed_image.save("plan_pretraite.jpg", quality=95)
        print("‚úÖ Image pr√©trait√©e sauvegard√©e : plan_pretraite.jpg")
        response = model.generate_content([prompt, processed_image])

        print("‚úÖ Analyse termin√©e!")
        return response.text

    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {str(e)}")
        return None

if __name__ == "__main__":
    print("üîß V√©rification de la configuration...")
    if not check_api_configuration():
        exit(1)
    
    IMAGE_PATH = "Plan-2D.jpg"  

    result = analyze_architectural_plan_with_preprocessing(IMAGE_PATH)

    if result:
        print("\n" + "="*50)
        print("R√âSULTAT DE L'ANALYSE:")
        print("="*50)
        print(result)
    else:
        print("‚ùå √âchec de l'analyse")

